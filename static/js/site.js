// Generated by CoffeeScript 1.6.3
(function() {
  var active, expect, expectChord, expectKey, initInstrument, log, makePromise, notes, visualize, _ref,
    __slice = [].slice;

  window._d = window.d = (_ref = typeof console !== "undefined" && console !== null ? console.log.bind(console) : void 0) != null ? _ref : function() {};

  log = function() {
    var text, texts, _i, _len, _results;
    texts = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _results = [];
    for (_i = 0, _len = texts.length; _i < _len; _i++) {
      text = texts[_i];
      _results.push(d3.select('#log').append('p', ':first-child').text(text));
    }
    return _results;
  };

  makePromise = function(fn) {
    var defer;
    defer = Q.defer();
    fn(defer);
    return defer.promise;
  };

  expectKey = function(k) {
    return makePromise(function(defer) {
      return key(k, function() {
        d('Key pressed!');
        key.unbind(k);
        return defer.resolve();
      });
    });
  };

  expectChord = function(ks) {
    return makePromise(function(defer) {
      var k, n, _i, _len;
      n = ks.length;
      for (_i = 0, _len = ks.length; _i < _len; _i++) {
        k = ks[_i];
        expectKey(k).then(function() {
          d(1);
          if (--n === 0) {
            return defer.resolve();
          }
        });
      }
    });
  };

  expect = function(ks) {
    d('expecting', ks);
    return function() {
      return expectChord(ks.split(''));
    };
  };

  key('a', function() {
    return d('a');
  });

  initInstrument = function() {
    var dispatch, fulfillWhen, tag;
    dispatch = d3.dispatch('ready', 'keydown', 'keyup', 'error');
    navigator.requestMIDIAccess().then(function(midi) {
      var inputs;
      inputs = midi.inputs();
      if (inputs.length) {
        inputs[0].onmidimessage = function(e) {
          var cmd, key, velocity, _ref1;
          _ref1 = e.data, cmd = _ref1[0], key = _ref1[1], velocity = _ref1[2];
          if (cmd === 144 && velocity > 0) {
            return dispatch.keydown({
              key: key,
              velocity: velocity,
              time: e.timeStamp,
              event: e
            });
          } else if (cmd === 128 || (cmd === 144 && velocity === 0)) {
            return dispatch.keyup({
              key: key,
              time: e.timeStamp,
              event: e
            });
          }
        };
        return dispatch.ready(dispatch, inputs[0]);
      } else {
        return dispatch.error(true, null);
      }
    }, function(err) {
      return dispatch.error(false, err);
    });
    tag = (function() {
      var next;
      next = 0;
      return function(type) {
        return type + '.internal_' + next++;
      };
    })();
    fulfillWhen = function(defer, type, condition) {
      type = tag(type);
      return dispatch.on(type, function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (condition.apply(null, args)) {
          defer.resolve();
          return dispatch.on(type, null);
        }
      });
    };
    dispatch.waitForPress = function(key) {
      d('waiting for', key);
      return makePromise(function(defer) {
        return fulfillWhen(defer, 'keydown', function(e) {
          return e.key === key;
        });
      });
    };
    return dispatch;
  };

  notes = [];

  visualize = function() {
    var enter, now, time, update;
    now = Date.now();
    time = d3.scale.linear().domain([
      d3.min(notes, function(d) {
        return d.time;
      }), now
    ]).range([0, 900]);
    update = d3.select('#notes').selectAll('.note').data(notes);
    enter = update.enter().append('rect').attr({
      "class": 'note'
    });
    update.attr({
      x: function(d) {
        return time(d.time);
      },
      y: 100,
      width: function(d) {
        var _ref1;
        return time((_ref1 = d.endTime) != null ? _ref1 : now) - time(d.time);
      },
      height: 15,
      fill: '#ccc',
      'fill-opacity': 0.75
    });
    return false;
  };

  d3.timer(visualize);

  active = {};

  initInstrument().on('keydown', function(_arg) {
    var key, note, time, velocity;
    key = _arg.key, velocity = _arg.velocity, time = _arg.time;
    note = {
      key: key,
      velocity: velocity,
      time: time
    };
    active[key] = note;
    return notes.push(note);
  }).on('keyup', function(e) {
    if (e.key in active) {
      return active[e.key].endTime = e.time;
    }
  }).on('error', function(instrumentMissing, err) {
    if (instrumentMissing) {
      return d('You have no MIDI keyboard.');
    } else {
      return d('Error initializing MIDI connection:', err);
    }
  }).on('ready', function(instr, input) {
    var ex;
    d('Ready', input);
    ex = [72, 74, 76, 77, 79, 77, 76, 74, 72];
    return ex.reduce(function(q, ks, i) {
      if (i === 0) {
        return q.fcall(function() {
          return instr.waitForPress(ks);
        });
      } else {
        return q.then(function() {
          return instr.waitForPress(ks);
        });
      }
    }, Q).then(function() {
      return d('finished!');
    });
  });

}).call(this);
