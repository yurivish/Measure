// Generated by CoffeeScript 1.6.3
(function() {
  var Theory, colorScale, enter, exercise, initInstrument, instrument, interval, major, makePromise, notes, parent, start, startId, timeline, update, w, xpos, _ref,
    __slice = [].slice;

  window._d = window.d = (_ref = typeof console !== "undefined" && console !== null ? console.log.bind(console) : void 0) != null ? _ref : function() {};

  Theory = function() {};

  notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];

  major = function(start) {
    var incs, offsets;
    incs = [0, 2, 2, 1, 2, 2, 2];
    offsets = (function(note) {
      var inc, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = incs.length; _i < _len; _i++) {
        inc = incs[_i];
        _results.push(note += inc);
      }
      return _results;
    })(0);
    return offsets.map(function(offset) {
      return start + offset;
    });
  };

  makePromise = function(fn) {
    var defer;
    defer = Q.defer();
    fn(defer);
    return defer.promise;
  };

  initInstrument = function() {
    var dispatch, fulfillWhen, tag;
    dispatch = d3.dispatch('ready', 'keydown', 'keyup', 'error');
    navigator.requestMIDIAccess().then(function(midi) {
      var inputs;
      inputs = midi.inputs();
      if (inputs.length) {
        inputs[0].onmidimessage = function(e) {
          var cmd, key, velocity, _ref1;
          _ref1 = e.data, cmd = _ref1[0], key = _ref1[1], velocity = _ref1[2];
          if (cmd === 144 && velocity > 0) {
            d('Key down:', key);
            return dispatch.keydown({
              key: key,
              velocity: velocity,
              time: e.timeStamp,
              event: e
            });
          } else if (cmd === 128 || (cmd === 144 && velocity === 0)) {
            return dispatch.keyup({
              key: key,
              time: e.timeStamp,
              event: e
            });
          }
        };
        d('Ready:', inputs[0]);
        return dispatch.ready(dispatch, inputs[0]);
      } else {
        return dispatch.error(true, null);
      }
    }, function(err) {
      return dispatch.error(false, err);
    });
    d3.select(document).on('keydown', function() {
      return dispatch.keydown({
        key: 72,
        velocity: 50,
        time: Date.now(),
        event: null
      });
    }).on('keyup', function() {
      return dispatch.keyup({
        key: 72,
        time: Date.now(),
        event: null
      });
    });
    tag = (function() {
      var next;
      next = 0;
      return function(type) {
        return type + '.internal_' + next++;
      };
    })();
    fulfillWhen = function(defer, type, condition) {
      type = tag(type);
      return dispatch.on(type, function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (condition.apply(null, args)) {
          defer.resolve();
          return dispatch.on(type, null);
        }
      });
    };
    dispatch.watch = function(name, listener) {
      var id;
      id = tag(name);
      dispatch.on(id, listener);
      return id;
    };
    dispatch.unwatch = function(id) {
      return dispatch.on(id, null);
    };
    dispatch.waitForPress = function(key) {
      d('waiting for', key);
      return makePromise(function(defer) {
        return fulfillWhen(defer, 'keydown', function(e) {
          return e.key === key;
        });
      });
    };
    return dispatch;
  };

  exercise = {
    notes: _.flatten([major(60), 60 + 12, major(60).reverse()])
  };

  d('Exercise:', exercise);

  instrument = initInstrument();

  interval = 500;

  notes = exercise.notes.map(function(key, index) {
    return {
      key: key,
      index: index,
      offset: index * interval
    };
  });

  w = 600;

  xpos = d3.scale.linear().domain([0, notes.length - 1]).range([0, w]);

  parent = d3.select('#notes').append('g').attr('transform', 'translate(25, 125)');

  timeline = parent.append('line').attr({
    "class": 'timeline',
    x1: 0,
    y1: -25,
    x2: 0,
    y2: 25,
    stroke: '#fff'
  });

  update = parent.selectAll('.note').data(notes);

  enter = update.enter().append('g').attr({
    "class": 'note',
    transform: function(d, i) {
      return "translate(" + (xpos(i)) + ", 0)";
    }
  });

  enter.append('circle').attr({
    r: 3,
    fill: '#fff'
  });

  update.each(function(d) {
    return d.sel = d3.select(this);
  });

  colorScale = d3.scale.linear().domain([0, 0.5, 1]).range(['blue', '#666', 'red']).interpolate(d3.interpolateLab);

  start = function() {
    var startTime;
    startTime = Date.now();
    timeline.transition().duration(interval * (notes.length - 1)).ease('linear').attr({
      transform: "translate(" + w + ", 0)"
    });
    instrument.on('keydown', function(e) {
      var index, nextNote, now, prevNote, selectedNote;
      now = Date.now();
      index = Math.floor((now - startTime) / interval);
      prevNote = notes[index];
      nextNote = notes[index + 1];
      if ((prevNote != null) && prevNote.key === e.key) {
        selectedNote = prevNote;
      }
      if ((nextNote != null) && nextNote.key === e.key) {
        selectedNote = nextNote;
      }
      if (selectedNote) {
        selectedNote.sel.select('circle').attr('fill', 'red');
        return selectedNote.pressedAt = e.time;
      }
    });
    notes[0].sel.select('circle').attr('fill', 'red');
    return d3.transition;
  };

  startId = instrument.watch('keydown', function() {
    start();
    return instrument.unwatch(startId);
  });

}).call(this);
